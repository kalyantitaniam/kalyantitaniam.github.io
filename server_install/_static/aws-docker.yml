---
version: '3.7'

# This docker-compose enables ssl for elastic.
# Test certs/jks are available in the test-certs.zip

services:
  arcus:
    image: titaniam/arcus:1.7.4
    container_name: arcus-node1
    environment:
      # aws_region - region where the SM values are stored in AWS
      # this configuraiton uses IAM roles to read data from AWS
      # Assign proper IAM roles to the ec2 instances that will enable
      # SecretsManagerReadWrite
      - aws_region=us-east-2

      # keyring_name is part of the Secrets Manager (SM) secret name.
      # Secret name is of the format - titaniam_key_ring/<keyring_name>/<key_name>
      # - Secret name must begin with titaniam_key_ring
      # - <titaniam.keyring.name> is a custom name of the environment & deployment
      # - <key_name> will correspond to the elastic index name
      # Setting Active=true as a tag on Secrets Manager secret name will make that key default,
      # when index level key is absent. (This will make index level keys default to a single key for new index)
      - titaniam.keyring.name=vault-singlenode-byok

      # Possible values aws|byok|file|azure
      # AWS Secrets Manager based keys - aws
      # BYOK based key configuration - byok (see below for additional byok params)
      # File based key store (use only in dev environments)
      # Azure Key vault based keys - azure
      - titaniam.store.type=aws
      - titaniam.aws.access.id=<AWS_ACCESS_ID>
      - titaniam.aws.secret.id=<AWS_SECRET_ID>

      # byok configuration
      #      - titaniam.store.type=byok
      #      - titaniam.es.host=http://arcus:9200
      #      - titaniam.byok.refresh-secs=30

      # Elastic node name
      - node.name=arcus01
      - http.port=9200

      # For development purposes only
      # For multi-node cluster, remove this propery and add cluster related properties
      - discovery.type=single-node
      #- cluster.name=titaniam-vault-cluster
      #- cluster.initial_master_nodes=arcus01,arcus02
      # IP address of the "other" master-eligible hosts, comma separated.
      #- discovery.seed_hosts=172.32.92.48

      # Binds http.port to all IP address on the host.
      - network.host=0.0.0.0

      # The external IP published for this node in /_cat/nodes etc., for multi-node setup
      #- network.publish_host=172.32.92.48
      - node.roles=master, data, ingest
      - gateway.recover_after_nodes=1
      - transport.port=9300-9400

      # Sets the log levels for all non-titaniam packages
      - log_level_root=info

      # Sets the log levels for all titaniam packages
      - log_level_titaniam=info

      # Required, shouldn't be changed across restarts of the container else data will be lost.
      # This should reflect the external directory mount
      # Ensure this directory is writable by uid=1000 and not root.
      - path.data=/var/lib/arcusdata

      # Sets the memory size of the java process. 512m is an example. Production setups
      # should be ~4G or higher depending on use cases.
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - opendistro_security.disabled=true

    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      # Important configuration that determines where Elasticsearch will store
      # the data. This volume tells docker container how the host directory maps
      # to directory inside docker container. Actual mapping to elastic is done
      # using path.data environment variable above.
      - /home/karthik/lib/arcusdata:/var/lib/arcusdata
    ports:
      - "9200:9200"
      - "9300:9300"

  spectra:
    image: titaniam/spectra:2.0.2
    container_name: spectra_node1
    depends_on:
      - arcus
    ports:
      - "8080:8080"
    environment:
      - jvm_args=-Xms512m -Xmx512m -Djavax.net.debug=ssl:handshake

      # This property determines which secret name contains the
      # configuration for spectra application. The contents of
      # the property is included in Getting Started Guide.
      - sdss.properties-source=aws.sm
      - sdss.secretsmanager.properties.keyname=titaniam.properties

      # This is the same as aws_region environment variable above under arcus
      - sdss.aws.sm.region=us-east-2

      # This is the same as keyring_name environment variable above under arcus
      # This value *must* match the value specified under arcus
      - sdss.aws.sm.keyring-name=vault-singlenode-byok

      # All of these values should ideally be present in the secret name specified
      # under 'sdss.secretsmanager.properties.keyname', so that docker-compose does
      # not have DB credentials.
      # If specified here, the values will override the ones from Secrets Manager.
      # This value *must* match the value specified under arcus
      - spring.datasource.url=jdbc:postgresql://spectra-postgres:5432/titaniam?autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true
      - spring.datasource.password=PoSSiBle
      - spring.datasource.username=admin
      #- spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
      #- spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDB53Dialect
      - spring.datasource.driverClassName=org.postgresql.Driver
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL10Dialect
      - spring.jpa.open-in-view=false
      - management.endpoints.web.exposure.include=loggers
      - management.endpoint.loggers.enabled=true

      # This must match the IP and port of the elastic configured
      # in the arcus above.
      # This is required only if spectra is enabled. (sdv.enabled: true in sdss.secretsmanager.properties.keyname secret)
      - spring.elasticsearch.rest.uris=http://arcus:9200

      # Disalbe single-sing-on
      - sso.enabled=false
      - spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration

      # Possible values aws|byok|file|azure
      # AWS Secrets Manager based keys - aws
      # BYOK based key configuration - byok (see below for additional byok params)
      # File based key store (use only in dev environments)
      # Azure Key vault based keys - azure
      - sdss.seed.store.type=aws
      - sdss.aws.sm.access-key=<AWS_ACCESS_ID>
      - sdss.aws.sm.secret-key=<AWS_SECRET_ID>

      # byok configuration
      # create an index named - titaniam_byok_config
      # issues with doing BYOK with SSL??
      #      - sdss.seed.store.type=byok
      #      - sdss.byok.refresh-secs=30
      #      - sdss.byok.host=http://arcus:9200

      # S3 file mgmt
      - amazon.s3.region=us-east-2

      # Controls logging.
      - log_level_root=info
      - log_level_titaniam=info

      ## enable mTLS
    #   - server.ssl.enabled=true
    #   - server.ssl.client-auth=need
    #   - server.ssl.key-store=file:/usr/local/granger/key-store.jks
    #   - server.ssl.key-store-password=changeit
    #   - server.ssl.key-alias=server
    #   - server.ssl.key-store-type=JKS
    #   - server.ssl.key-store-provider=SUN
    #   - server.ssl.trust-store=file:/usr/local/granger/trust-store.jks
    #   - server.ssl.trust-store-password=changeit
    #   - server.ssl.trust-store-type=JKS

      ## Enabling the trust store that has the root-ca certs
    #      - sdss.trust.store=file:/usr/local/granger/trust-store.jks
    #      - sdss.trust.store.password=secret
    #      - sdss.es.login=admin
    #      - sdss.es.password=ASVrWiEAAAABAAABfikxCXxfKK2hxqCmCAliJupigssc
    volumes:
    #   - /home/centos/certs/server.keys.jks:/usr/local/granger/key-store.jks
    #   - /home/centos/certs/opotrun-server_truststore.jks:/usr/local/granger/trust-store.jks
      - /var/log/granger:/var/log/granger

  # Database service (Postgres)
  spectra-postgres:
    container_name: postgres
    image: postgres:13.3-alpine
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: PoSSiBle
      POSTGRES_DB: titaniam
      PGDATA: /var/lib/postgresql/13/main
    ports:
      - "5432:5432"
    volumes:
      # Ensure this directory exists on the local filesystem
      - /var/lib/postgresql/13/main:/var/lib/postgresql/13/main

