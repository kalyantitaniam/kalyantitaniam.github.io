.. _deploy_kubernetes:

Step 9: Deploy Titaniam Server using Kubernetes
===============================================

This section explains how you can deploy Titaniam Server on Kubernetes using ``kubectl`` and ``helm chart``. 

You must already have kubernetes cluster deployed in your environment. 

Creating Kubernetes Cluster on EKS
----------------------------------

If you have not already created a kubernetes cluster on EKS (Amazon Elastic Kubernetes Service), do so using this `guide <https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html>`__.


Creating Kubernetes Cluster on EC2 Instances
--------------------------------------------

If you are deploying the application on a Kubernetes cluster on EC2, then read this section.

Use one of these guides to running Kubernetes on AWS EC2. 

* `Using kOps <https://kubernetes.io/docs/setup/production-environment/tools/kops/>`__
* `Using get-kube <https://jamesdefabia.github.io/docs/getting-started-guides/aws/>`__

Verifying Cluster using kubectl
-------------------------------

After the cluster is created, the `kubectl` command refers to the newly created cluster.  However, you can verify the cluster that `kubectl` refers by using the following command::


	$ kubectl config current-context


The following command lists all clusters::

	$ kubectl config get-contexts

The following example output illustrates the current kubectl context is pointing to aws eks cluster. The **CURRENT** column is marked with ``*`` for aws eks cluster, which indicates that aws eks cluster is the current context which kubectl is referring.

:: 

	$ kubectl config get-contexts
	CURRENT   NAME                                                  CLUSTER                                   AUTHINFO                                              NAMESPACE
	  *       user@host-eks-cluster.ap-south-1.eksctl.io   host-eks-cluster.ap-south-1.eksctl.io   user@host-eks-cluster.ap-south-1.eksctl.io   
	          docker-desktop                                        docker-desktop                            docker-desktop                                        
	          kind-kind                                             kind-kind                                 kind-kind                                             
	          minikube                                              minikube                                  minikube                                              default

There can be many cluster(for example minikube, staging-cluster or local-cluster), you can switch to any cluster using the following command::

	kubectl config use-context <cluster-name>


The following command checks whether the cluster nodes are ready. The following example illustrates that the ``minikube`` cluster is ready for deploying kubernetes resources.

::

	$ kubectl get nodes
	NAME       STATUS   ROLES                  AGE   VERSION
	minikube   Ready    control-plane,master   25h   v1.23.3


Deployment
----------

After the kubernetes cluster is avaiable, Titaniam server can be deployed using one of the following ways:

* Deployment using kubernetes yaml file
* Deployment using helm charts



Deployment Using Kubernetes yaml File
-------------------------------------

You will need the following ``yaml`` files for deploying Titaniam Server in kubernetes

* **spectra-secret.yaml** contains the access token encrypted in base64 format. Use this access token to pull images from Titaniam private repository.
* **spectra-configmap.yaml** contains the environment variables.
* **spectra-deployment.yaml** contains image details.
* **spectra-service.yaml** used for accessing the app from outside the kubernetes cluster.


#. Execute the following sequence of commands on the kubernetes cluster.

	::

		kubectl apply -f spectra-secret.yaml

		kubectl apply -f spectra-configmap.yaml

		kubectl apply -f spectra-deployment.yaml

		kubectl apply -f spectra-service.yaml

#. Check the service list

	:: 

	  kubectl get svc

   This command lists the IP address or DNS name to access the application through the load balancer.

   For example,

   ::

     http://172.105.45.27:8080

   Now you must be able to access the Titaniam Server service at this URL. 


Deployment using helm charts
----------------------------

You can also install Titaniam Server using helm charts. 

Titaniam Server helm chart consists of the following files and directories.

::

	$ tree spectra-2.0.4
	spectra-2.0.4
	├── Chart.yaml
	├── charts
	├── templates
	│   ├── spectra-configmap.yaml
	│   ├── spectra-deployment.yaml
	│   ├── spectra-secret.yaml
	│   └── spectra-service.yaml
	└── values.yaml

	2 directories, 6 files

* **spectra-secret.yaml** - Contains the access token encrypted in base64 format. Use this token to pull images from our private repository.
* **spectra-configmap.yaml** -  Contains the environment variables.
* **spectra-deployment.yaml** -  Contains image details.
* **spectra-service.yaml** -  Used for accessing the app from outside the kubernetes cluster.
* **values.yaml** - Contains replicaSet, elastic-search, and postgres input parameters, these parameters must be changed accordingly.
* **Chart.yaml** - Contains basic information like helm chart version, app version etc of spectra helm chart.

Installing Titaniam helm Charts in Cluster
------------------------------------------

Update the parameters of elastic-search, postgres, and replicaset accordingly in **values.yml** and use the following cli command to install helm chart.

::

	helm install spectra spectra-1.4.3


Output::

	NAME: spectra
	LAST DEPLOYED: Fri Mar 18 15:00:50 2022
	NAMESPACE: default
	STATUS: deployed
	REVISION: 1
	TEST SUITE: None

Listing helm installation
-------------------------

::

	helm list


Output:

::

	NAME   	NAMESPACE	REVISION	UPDATED                             	STATUS  	CHART        	APP VERSION
	spectra	default  	1       	2022-03-18 15:00:50.881353 +0530 IST	deployed	spectra-1.0.0	1.4.3   



Checking whether all kubernetes resources in the cluster are up/available
-------------------------------------------------------------------------

::


	kubectl get all

Output

::


	NAME                                      READY   STATUS    RESTARTS   AGE
	pod/spectra-deployment-57468f8586-fvbvg   1/1     Running   0          19s
	pod/spectra-deployment-57468f8586-ws8mm   1/1     Running   0          19s
	pod/spectra-deployment-57468f8586-xdbqw   1/1     Running   0          19s

	NAME                      TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
	service/kubernetes        ClusterIP      10.96.0.1       <none>        443/TCP          7h3m
	service/spectra-service   LoadBalancer   10.101.205.25   <pending>     8080:30120/TCP   19s

	NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE
	deployment.apps/spectra-deployment   3/3     3            3           19s

	NAME                                            DESIRED   CURRENT   READY   AGE
	replicaset.apps/spectra-deployment-57468f8586   3         3         3       19s

Checking the spectra secret
---------------------------

::

	$ kubectl get secret                
	NAME                            TYPE                                  DATA   AGE
	default-token-895js             kubernetes.io/service-account-token   3      13s
	sh.helm.release.v1.spectra.v1   helm.sh/release.v1                    1      3s
	spectra-secret                  kubernetes.io/dockerconfigjson        1      3s


Checking the spectra configmap
------------------------------

::

	$ kubectl get configmap
	NAME               DATA   AGE
	kube-root-ca.crt   1      82s
	spectra-config     26     72s


Verifying environment variables in configmap
--------------------------------------------

::

	$ kubectl describe configmap spectra-config
	Name:         spectra-config
	Namespace:    default
	Labels:       app=spectra
	              app.kubernetes.io/managed-by=Helm
	Annotations:  meta.helm.sh/release-name: spectra
	              meta.helm.sh/release-namespace: default


Checking the log of a running pod
---------------------------------

::

	$ kubectl logs pod/spectra-deployment-57468f8586-fvbvg 
	 _____ _ _              _                 
	|_   _(_) |_ __ _ _ __ (_) __ _ _ __ ___  
	  | | | | __/ _` | '_ \| |/ _` | '_ ` _ \ 
	  | | | | || (_| | | | | | (_| | | | | | |
	  |_| |_|\__\__,_|_| |_|_|\__,_|_| |_| |_|
	                                          
	 ____                  _             
	/ ___| _ __   ___  ___| |_ _ __ __ _ 
	\___ \| '_ \ / _ \/ __| __| '__/ _` |
	 ___) | |_) |  __/ (__| |_| | | (_| |
	|____/| .__/ \___|\___|\__|_|  \__,_|
	      |_|                            
	java -Xms512m -Xmx512m -DLOG_HOME=/var/log/granger -Dlogging.config=file:///usr/local/granger/logback.xml -jar /usr/local/granger/titaniam-server.jar --spring.config.location=file:///usr/local/granger/application.properties

	  .   ____          _            __ _ _
	 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
	( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
	 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
	  '  |____| .__|_| |_|_| |_\__, | / / / /
	 =========|_|==============|___/=/_/_/_/
	 :: Spring Boot ::                (v2.5.3)

	09:36:43.486 [INFO ] c.t.Application: Starting Application using Java 16.0.2 on spectra-deployment-57468f8586-fvbvg with PID 30 (/usr/local/granger/titaniam-server.jar started by titaniam in /usr/local/granger)
	09:36:43.530 [DEBUG] c.t.Application: Running with Spring Boot v2.5.3, Spring v5.3.9
	09:36:43.534 [INFO ] c.t.Application: No active profile set, falling back to default profiles: default
	09:36:56.131 [INFO ] o.s.d.r.c.RepositoryConfigurationDelegate: Bootstrapping Spring Data JPA repositories in DEFAULT mode.
	09:36:57.972 [INFO ] o.s.d.r.c.RepositoryConfigurationDelegate: Finished Spring Data repository scanning in 1735 ms. Found 8 JPA repository interfaces.
	09:37:02.680 [INFO ] o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker: Bean 'application' of type [com.titaniamlabs.Application$$EnhancerBySpringCGLIB$$c1b44626] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
	09:37:03.552 [INFO ] o.h.v.i.u.Version: HV000001: Hibernate Validator 6.2.0.Final
	09:37:08.703 [INFO ] o.s.b.w.e.t.TomcatWebServer: Tomcat initialized with port(s): 8080 (http)
	09:37:08.826 [INFO ] o.a.c.h.Http11NioProtocol: Initializing ProtocolHandler ["http-nio-8080"]
	09:37:08.828 [INFO ] o.a.c.c.StandardService: Starting service [Tomcat]
	09:37:08.832 [INFO ] o.a.c.c.StandardEngine: Starting Servlet engine: [Apache Tomcat/9.0.50]
	09:37:09.322 [INFO ] o.a.c.c.C.[.[.[/]: Initializing Spring embedded WebApplicationContext
	09:37:09.323 [INFO ] o.s.b.w.s.c.ServletWebServerApplicationContext: Root WebApplicationContext: initialization completed in 25268 ms
	09:37:13.987 [INFO ] o.h.j.i.u.LogHelper: HHH000204: Processing PersistenceUnitInfo [name: default]
	09:37:14.780 [INFO ] o.h.Version: HHH000412: Hibernate ORM core version 5.4.32.Final
	09:37:15.970 [INFO ] o.h.a.c.Version: HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
	09:37:16.868 [INFO ] c.z.h.HikariDataSource: HikariPool-1 - Starting...
	09:37:17.745 [INFO ] c.z.h.HikariDataSource: HikariPool-1 - Start completed.
	09:37:18.145 [INFO ] o.h.d.Dialect: HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL10Dialect
	09:37:27.961 [INFO ] o.h.e.t.j.p.i.JtaPlatformInitiator: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
	09:37:28.027 [INFO ] o.s.o.j.LocalContainerEntityManagerFactoryBean: Initialized JPA EntityManagerFactory for persistence unit 'default'
	09:37:28.897 [DEBUG] c.t.a.s.AwsSeedStore: build secretsmanager
	09:37:29.005 [DEBUG] c.t.a.A.Builder: end - secretsmanager created successfully
	09:37:29.006 [DEBUG] c.t.a.s.AwsSeedStore: begin - build keyring using aws secretsmanager
	09:37:29.014 [DEBUG] c.t.a.AwsSecretsManagerImpl: List all secrets
	09:37:29.088 [DEBUG] c.t.a.AwsSecretsManagerImpl: Calling AWS SM. Iteration #: 0
	09:37:30.530 [DEBUG] c.t.a.AwsSecretsManagerImpl: Calling AWS SM. Iteration #: 1
	09:37:30.832 [DEBUG] c.t.a.AwsSecretsManagerImpl: Calling AWS SM. Iteration #: 2
	09:37:31.114 [DEBUG] c.t.a.AwsSecretsManagerImpl: AWS SM call iterations completed. Total iterations: 3
	09:37:31.115 [DEBUG] c.t.a.Utils: Fetching key: titaniam_key_ring/func-testing/func-test-001
	09:37:31.116 [DEBUG] c.t.a.AwsSecretsManagerImpl: Fetching key: titaniam_key_ring/func-testing/func-test-001
	09:37:31.388 [DEBUG] c.t.a.Utils: begin - Parsing value for: titaniam_key_ring/func-testing/func-test-001
	09:37:31.393 [DEBUG] c.t.a.Utils: end - 'titaniam_key_ring/func-testing/func-test-001' value parsed successfully
	09:37:31.400 [DEBUG] c.t.a.Utils: Fetching key: titaniam_key_ring/func-testing/default-key-for-testing
	09:37:31.401 [DEBUG] c.t.a.AwsSecretsManagerImpl: Fetching key: titaniam_key_ring/func-testing/default-key-for-testing
	09:37:31.689 [DEBUG] c.t.a.Utils: begin - Parsing value for: titaniam_key_ring/func-testing/default-key-for-testing
	09:37:31.693 [DEBUG] c.t.a.Utils: end - 'titaniam_key_ring/func-testing/default-key-for-testing' value parsed successfully
	09:37:31.709 [DEBUG] c.t.a.s.AwsSeedStore: SimpleKeyRing{keys=[default-key-for-testing, func-test-001], activeName='default-key-for-testing'}
	09:37:31.719 [DEBUG] c.t.a.s.AwsSeedStore: end - keyring successfully created using aws secretsmanager
	09:37:31.906 [DEBUG] c.t.e.EventRegistry: register - com.titaniamlabs.crypto.engine.FieldLevelInitializationFactory
	09:37:31.934 [DEBUG] c.t.a.A.Builder: end - secretsmanager created successfully
	09:37:31.935 [DEBUG] c.t.a.AwsSecretsManagerImpl: Fetching key: titaniam.license
	09:37:33.104 [INFO ] c.t.a.l.AwsLicenseLoader: Loaded license
	09:37:33.109 [DEBUG] c.t.a.l.AwsLicenseLoader: Valid json license found
	09:37:33.110 [DEBUG] c.t.a.l.AwsLicenseLoader: License initialization from AWS successful
	09:37:41.031 [DEBUG] c.t.s.ESClient: sdss_store_prod v1.0 Schema already exists
	09:37:41.171 [DEBUG] c.t.s.RestClientManager: credentials found. creating provider with: 294lgnpkis
	09:37:41.187 [DEBUG] c.t.s.RestClientManager: trust store not set
	09:37:41.831 [DEBUG] c.t.s.ESClient: sdss-tangle-pipeline Pipeline already exists
	09:37:41.852 [DEBUG] c.t.s.ESClient: default-key-for-testing Index already exists
	09:37:41.891 [DEBUG] c.t.s.ESClient: sdss_store_prod Index alias already exists for default-key-for-testing Index
	09:37:49.436 [INFO ] o.s.b.a.e.w.EndpointLinksResolver: Exposing 1 endpoint(s) beneath base path '/actuator'
	09:37:49.696 [INFO ] o.a.c.h.Http11NioProtocol: Starting ProtocolHandler ["http-nio-8080"]
	09:37:49.815 [INFO ] o.s.b.w.e.t.TomcatWebServer: Tomcat started on port(s): 8080 (http) with context path ''
	09:37:49.983 [INFO ] c.t.Application: Started Application in 84.307 seconds (JVM running for 88.929)
	--> Application Initialized <--



Removing the kubernetes resources using kubectl
-----------------------------------------------

Removing deployment
~~~~~~~~~~~~~~~~~~~

::

	$ kubectl delete deployment.apps/spectra-deployment
	deployment.apps "spectra-deployment" deleted
	user@host helm-chart % kubectl get all
	NAME                                      READY   STATUS        RESTARTS   AGE
	pod/spectra-deployment-57468f8586-29pzx   1/1     Terminating   0          13h
	pod/spectra-deployment-57468f8586-2cj6s   1/1     Terminating   0          13h
	pod/spectra-deployment-57468f8586-zf84x   1/1     Terminating   0          13h

	NAME                      TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
	service/kubernetes        ClusterIP      10.96.0.1        <none>        443/TCP          24h
	service/spectra-service   LoadBalancer   10.107.107.188   <pending>     8080:30735/TCP   13h

Removing service
~~~~~~~~~~~~~~~~

::

	$ kubectl delete service/spectra-service


Removing configmap
~~~~~~~~~~~~~~~~~~

::

	$ kubectl delete configmap spectra-config
	configmap "spectra-config" deleted


Removing secret
~~~~~~~~~~~~~~~

::

	$ kubectl delete secret spectra-secret
	secret "spectra-secret" deleted


Uninstalling helm release
-------------------------

::

	$ helm list
	NAME   	NAMESPACE	REVISION	UPDATED                             	STATUS  	CHART        	APP VERSION
	spectra	default  	1       	2022-03-18 15:29:53.602875 +0530 IST	deployed	spectra-1.0.0	1.4.3      
	$
	$ 
	$ helm uninstall spectra
	release "spectra" uninstalled
	$
	$
	$ kubectl get all
	NAME                                      READY   STATUS        RESTARTS      AGE
	pod/spectra-deployment-57468f8586-22gb2   1/1     Terminating   2 (10h ago)   10h
	pod/spectra-deployment-57468f8586-d4tkl   1/1     Terminating   0             10h
	pod/spectra-deployment-57468f8586-wk2ms   1/1     Terminating   0             10h

	NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
	service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   10h